// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4930.TestBotEncoding;
    
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder encoderQuadratureEncoder1;
    public static Encoder encoderQuadratureEncoder2;
    public static SpeedController driveTrainMotor#3;
    public static SpeedController driveTrainMotor#4;
    public static SpeedController driveTrainMotor#1;
    public static SpeedController driveTrainMotor#2;
    public static RobotDrive driveTrainRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        encoderQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Encoder", "Quadrature Encoder 1", encoderQuadratureEncoder1);
        encoderQuadratureEncoder1.setDistancePerPulse(1.0);
        encoderQuadratureEncoder1.setPIDSourceParameter(PIDSourceParameter.kRate);
        encoderQuadratureEncoder2 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Encoder", "Quadrature Encoder 2", encoderQuadratureEncoder2);
        encoderQuadratureEncoder2.setDistancePerPulse(1.0);
        encoderQuadratureEncoder2.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainMotor#3 = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "Motor #3", (Talon) driveTrainMotor#3);
        
        driveTrainMotor#4 = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "Motor #4", (Talon) driveTrainMotor#4);
        
        driveTrainMotor#1 = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "Motor #1", (Talon) driveTrainMotor#1);
        
        driveTrainMotor#2 = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "Motor #2", (Talon) driveTrainMotor#2);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainMotor#3, driveTrainMotor#4,
              driveTrainMotor#1, driveTrainMotor#2);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
